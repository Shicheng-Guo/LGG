# Prepare Tables and Figures with R script
BiocManager::install("SNPassoc")
# Prepare Tables and Figures with R scriptif (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.10")
BiocManager::install("SNPassoc")
library("SNPassoc")
library("scales")
calcOddsRatio <- function(mymatrix,alpha=0.05,referencerow=3){
mymatrix<-mymatrix+1
numrow <- nrow(mymatrix)
myrownames <- rownames(mymatrix)
OR<-c()
for (ii in 1:numrow){
rowname <- myrownames[ii]
DiseaseUnexposed <- mymatrix[referencerow,1]
ControlUnexposed <- mymatrix[referencerow,2]
if (ii != referencerow){
DiseaseExposed <- mymatrix[ii,1]
ControlExposed <- mymatrix[ii,2]
totExposed <- DiseaseExposed + ControlExposed
totUnexposed <- DiseaseUnexposed + ControlUnexposed
probDiseaseGivenExposed <- DiseaseExposed/totExposed
probDiseaseGivenUnexposed <- DiseaseUnexposed/totUnexposed
probControlGivenExposed <- ControlExposed/totExposed
probControlGivenUnexposed <- ControlUnexposed/totUnexposed
pvalue=fisher.test(matrix(c(DiseaseExposed,ControlExposed,DiseaseUnexposed,ControlUnexposed),2,2,byrow=T))$p.value
# calculate the odds ratio
oddsRatio <- (probDiseaseGivenExposed*probControlGivenUnexposed)/(probControlGivenExposed*probDiseaseGivenUnexposed)
# calculate a confidence interval
confidenceLevel <- (1 - alpha)*100
sigma <- sqrt((1/DiseaseExposed)+(1/ControlExposed)+(1/DiseaseUnexposed)+(1/ControlUnexposed))
# sigma is the standard error of our estimate of the log of the odds ratio
z <- qnorm(1-(alpha/2))
lowervalue <- oddsRatio * exp(-z * sigma)
uppervalue <- oddsRatio * exp( z * sigma)
temp=paste(rownames(mymatrix)[ii]," ",round(oddsRatio,2)," (",round(lowervalue,2),",",round(uppervalue,2),")"," P=",pvalue,sep="")
print(temp)
or<-c(round(oddsRatio,2),round(lowervalue,2),round(uppervalue,2),pvalue)
OR=rbind(OR,or)
}
}
return(OR)
}
epitabe1<-function(data){
xx<-data.frame(SNP1=data[,grep(snp1,colnames(data))],SNP2=data[,grep(snp2,colnames(data))])
x1<-subset(xx,SNP1==0 & SNP2==0)
x2<-subset(xx,SNP1>0 & SNP2==0)
x3<-subset(xx,SNP1==0 & SNP2>0)
x4<-subset(xx,SNP1>0 & SNP2>0)
xxx<-c(nrow(x1),nrow(x2),nrow(x3),nrow(x4))
return(xxx)
}
epitabe2<-function(data){
xx<-data.frame(SNP1=data[,grep(snp1,colnames(data))],SNP2=data[,grep(snp2,colnames(data))])
x1<-subset(xx,SNP1<2 & SNP2 <2)
x2<-subset(xx,SNP1==2 & SNP2 <2)
x3<-subset(xx,SNP1<2 & SNP2==2)
x4<-subset(xx,SNP1==2 & SNP2==2)
xxx<-c(nrow(x1),nrow(x2),nrow(x3),nrow(x4))
return(xxx)
}
epitabe3<-function(data){
xx<-data.frame(SNP1=data[,grep(snp1,colnames(data))],SNP2=data[,grep(snp2,colnames(data))])
x1<-subset(xx,SNP1==0 & SNP2 ==0)
x2<-subset(xx,SNP1==1 & SNP2==1)
x3<-subset(xx,SNP1==2 & SNP2==2)
xxx<-c(nrow(x1),nrow(x2),nrow(x3))
return(xxx)
}
percent <- function(x, digits = 1, format = "f", ...){
result<-paste0(formatC(100 * x, format = format, digits = digits, ...), "%")
return(result)
}
? glm
glm(PHENOTYPE~rowSum,data,family = binomial(link = "logit"))
rs9268839_G
chisq.test(matrix(c(786,321,816,1271),2,2))
chisq.test(matrix(c(786,621,816,971),2,2))
chisq.test(matrix(c(786,721,816,871),2,2))
chisq.test(matrix(c(318,414,1284,1178),2,2))
chisq.test(matrix(c(318,314,1284,1278),2,2))
matrix(c(153,100,975,877,387,453,84,162),ncol=2,byrow=T)
chisq.test(matrix(c(153,100,975,877,387,453,84,162),ncol=2,byrow=T))
chisq.test(matrix(c(153,150,975,877,387,453,84,112),ncol=2,byrow=T))
chisq.test(matrix(c(115,109,1439,1483),2,2))
chisq.test(matrix(c(39,55,1496,1537),2,2))
chisq.test(matrix(c(153,150,975,897,387,433,84,112),ncol=2,byrow=T))
0.05/5
255/733
1625*0.025
1598*0.025
1625*0.025
1598*0.02
BiocManager::install("ChAMP")
library("ChAMP")
library("doParallel")
Dir="C:\\Users\\Schrodi Lab\\Documents\\GitHub\\LGG\\extdata\\"
set.seed(11)
targets <- read.metharray.sheet(Dir)
? read.metharray.sheet
Dir="C:\\Users\\Schrodi Lab\\Documents\\GitHub\\LGG\\extdata"
targets <- read.metharray.sheet(Dir)
Dir="C:\\Users\\Schrodi Lab\\Documents\\GitHub\\LGG\\extdata"
set.seed(11)
targets <- read.metharray.sheet(Dir)
RGSet <- read.metharray.exp(targets = targets)
phenoData <- pData(RGSet)
manifest <- getManifest(RGSet)
head(getProbeInfo(manifest))
myNormalRGSet<-preprocessFunnorm(RGSet, nPCs=4, sex = NULL, bgCorr = TRUE,dyeCorr = TRUE, keepCN = TRUE, ratioConvert = TRUE,verbose = TRUE)
? champ.load
?? champ.load
myLoad <- champ.load(Dir,filterBeads=TRUE,arraytype="450k")
library("ChAMP")
BiocManager::install("DMRcate")
library("ChAMP")
myLoad <- champ.load(Dir,filterBeads=TRUE,arraytype="450k")
# EPIC has 411 control probes
pdf("LGG_HGG_AMP_QC.pdf")
champ.QC()
dev.off()
##########################################################################
pdf("LGG_HGG.AMP.SVD.pdf")
champ.SVD(beta=myNorm,pd=myLoad$pd)
dev.off()
getwd()
setwd("C:/Users/Schrodi Lab/Documents/GitHub/LGG/extdata")
# EPIC has 411 control probes
pdf("LGG_HGG_AMP_QC.pdf")
champ.QC()
dev.off()
##########################################################################
pdf("LGG_HGG.AMP.SVD.pdf")
champ.SVD(beta=myNorm,pd=myLoad$pd)
dev.off()
myCombat <- champ.runCombat(beta=myNorm,pd=myLoad$pd,batchname=c("Slide"))
##########################################################################
# don't use all the cores which will easily be killed by system
detectCores()
seed=sample(seq(1,10000,by=1),1)
myNorm <- champ.norm(beta=myLoad$beta,arraytype="450k",cores=5)
myNorm <- champ.norm(beta=myLoad$beta,arraytype="450k",cores=1)
library("ChAMP")
library("doParallel")
Dir="C:/Users/Schrodi Lab/Documents/GitHub/LGG/extdata"
setwd("C:/Users/Schrodi Lab/Documents/GitHub/LGG/extdata")
set.seed(11)
targets <- read.metharray.sheet(Dir)
RGSet <- read.metharray.exp(targets = targets)
phenoData <- pData(RGSet)
manifest <- getManifest(RGSet)
head(getProbeInfo(manifest))
myNormalRGSet<-preprocessFunnorm(RGSet, nPCs=4, sex = NULL, bgCorr = TRUE,dyeCorr = TRUE, keepCN = TRUE, ratioConvert = TRUE,verbose = TRUE)
myLoad <- champ.load(Dir,filterBeads=TRUE,arraytype="450k")
# 450k has 411 control probes
pdf("LGG_HGG_AMP_QC.pdf")
champ.QC()
dev.off()
##########################################################################
pdf("LGG_HGG.AMP.SVD.pdf")
champ.SVD(beta=myNorm,pd=myLoad$pd)
dev.off()
myNorm <- champ.norm(beta=myLoad$beta,arraytype="450k",cores=1)
myCombat <- champ.runCombat(beta=myNorm,pd=myLoad$pd,batchname=c("Slide"))
##########################################################################
# don't use all the cores which will easily be killed by system
detectCores()
seed=sample(seq(1,10000,by=1),1)
qc
qc<-champ.QC()
qc<-champ.QC()
qc
myLoad$pd
champ.SVD(beta=myNorm,pd=myLoad$pd)
pdf("LGG_HGG.AMP.SVD.pdf")
champ.SVD(beta=myNorm,pd=myLoad$pd)
dev.off()
##########################################################################
pdf("LGG_HGG.AMP.SVD.pdf")
champ.SVD(beta=myNorm,pd=myLoad$pd)
dev.off()
library("ChAMP")
library("doParallel")
Dir="C:/Users/Schrodi Lab/Documents/GitHub/LGG/extdata"
setwd("C:/Users/Schrodi Lab/Documents/GitHub/LGG/extdata")
set.seed(11)
targets <- read.metharray.sheet(Dir)
RGSet <- read.metharray.exp(targets = targets)
phenoData <- pData(RGSet)
manifest <- getManifest(RGSet)
head(getProbeInfo(manifest))
myNormalRGSet<-preprocessFunnorm(RGSet, nPCs=4, sex = NULL, bgCorr = TRUE,dyeCorr = TRUE, keepCN = TRUE, ratioConvert = TRUE,verbose = TRUE)
myLoad <- champ.load(Dir,filterBeads=TRUE,arraytype="450k")
# 450k has 411 control probes
pdf("LGG_HGG_AMP_QC.pdf")
qc<-champ.QC()
dev.off()
##########################################################################
pdf("LGG_HGG.AMP.SVD.pdf")
champ.SVD(beta=myNorm,pd=myLoad$pd)
dev.off()
myNorm <- champ.norm(beta=myLoad$beta,arraytype="450k",cores=1)
myCombat <- champ.runCombat(beta=myNorm,pd=myLoad$pd,batchname=c("Slide"))
? champ.QC
champ.QC(beta = myNorm,pheno=myLoad$pd$Sample_Group,resultsDir="./CHAMP_Norm_QCimages/")
myLoad$pd
? champ.SVD
champ.SVD(beta=myNorm,pd=myLoad$pd,resultsDir="./CHAMP_Norm_SVD_images/")
##########################################################################
# don't use all the cores which will easily be killed by system
detectCores()
seed=sample(seq(1,10000,by=1),1)
myNorm <- champ.norm(beta=myLoad$beta,arraytype="450k",cores=1)
champ.SVD()
predictedSex <- getSex(myNormalRGSet, cutoff = -2)$predictedSex
predictedSex
length(predictedSex)
60/8
BiocManager::install("minfiData")
library("ChAMP")
library("ggplot2")
require("minfi")
library("knitr")
library("limma")
library("minfi")
library("IlluminaHumanMethylation450kanno.ilmn12.hg19")
library("IlluminaHumanMethylation450kmanifest")
library("IlluminaHumanMethylationEPICanno.ilm10b4.hg19")
library("IlluminaHumanMethylationEPICmanifest")
library("RColorBrewer")
library("missMethyl")
library("minfiData")
library("Gviz")
library("DMRcate")
library("stringr")
library("stringr")
library("ChAMP")
library("doParallel")
library("stringr")
library("ChAMP")
library("doParallel")
