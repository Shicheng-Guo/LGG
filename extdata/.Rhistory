# Prepare Tables and Figures with R script
BiocManager::install("SNPassoc")
# Prepare Tables and Figures with R scriptif (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.10")
BiocManager::install("SNPassoc")
library("SNPassoc")
library("scales")
calcOddsRatio <- function(mymatrix,alpha=0.05,referencerow=3){
mymatrix<-mymatrix+1
numrow <- nrow(mymatrix)
myrownames <- rownames(mymatrix)
OR<-c()
for (ii in 1:numrow){
rowname <- myrownames[ii]
DiseaseUnexposed <- mymatrix[referencerow,1]
ControlUnexposed <- mymatrix[referencerow,2]
if (ii != referencerow){
DiseaseExposed <- mymatrix[ii,1]
ControlExposed <- mymatrix[ii,2]
totExposed <- DiseaseExposed + ControlExposed
totUnexposed <- DiseaseUnexposed + ControlUnexposed
probDiseaseGivenExposed <- DiseaseExposed/totExposed
probDiseaseGivenUnexposed <- DiseaseUnexposed/totUnexposed
probControlGivenExposed <- ControlExposed/totExposed
probControlGivenUnexposed <- ControlUnexposed/totUnexposed
pvalue=fisher.test(matrix(c(DiseaseExposed,ControlExposed,DiseaseUnexposed,ControlUnexposed),2,2,byrow=T))$p.value
# calculate the odds ratio
oddsRatio <- (probDiseaseGivenExposed*probControlGivenUnexposed)/(probControlGivenExposed*probDiseaseGivenUnexposed)
# calculate a confidence interval
confidenceLevel <- (1 - alpha)*100
sigma <- sqrt((1/DiseaseExposed)+(1/ControlExposed)+(1/DiseaseUnexposed)+(1/ControlUnexposed))
# sigma is the standard error of our estimate of the log of the odds ratio
z <- qnorm(1-(alpha/2))
lowervalue <- oddsRatio * exp(-z * sigma)
uppervalue <- oddsRatio * exp( z * sigma)
temp=paste(rownames(mymatrix)[ii]," ",round(oddsRatio,2)," (",round(lowervalue,2),",",round(uppervalue,2),")"," P=",pvalue,sep="")
print(temp)
or<-c(round(oddsRatio,2),round(lowervalue,2),round(uppervalue,2),pvalue)
OR=rbind(OR,or)
}
}
return(OR)
}
epitabe1<-function(data){
xx<-data.frame(SNP1=data[,grep(snp1,colnames(data))],SNP2=data[,grep(snp2,colnames(data))])
x1<-subset(xx,SNP1==0 & SNP2==0)
x2<-subset(xx,SNP1>0 & SNP2==0)
x3<-subset(xx,SNP1==0 & SNP2>0)
x4<-subset(xx,SNP1>0 & SNP2>0)
xxx<-c(nrow(x1),nrow(x2),nrow(x3),nrow(x4))
return(xxx)
}
epitabe2<-function(data){
xx<-data.frame(SNP1=data[,grep(snp1,colnames(data))],SNP2=data[,grep(snp2,colnames(data))])
x1<-subset(xx,SNP1<2 & SNP2 <2)
x2<-subset(xx,SNP1==2 & SNP2 <2)
x3<-subset(xx,SNP1<2 & SNP2==2)
x4<-subset(xx,SNP1==2 & SNP2==2)
xxx<-c(nrow(x1),nrow(x2),nrow(x3),nrow(x4))
return(xxx)
}
epitabe3<-function(data){
xx<-data.frame(SNP1=data[,grep(snp1,colnames(data))],SNP2=data[,grep(snp2,colnames(data))])
x1<-subset(xx,SNP1==0 & SNP2 ==0)
x2<-subset(xx,SNP1==1 & SNP2==1)
x3<-subset(xx,SNP1==2 & SNP2==2)
xxx<-c(nrow(x1),nrow(x2),nrow(x3))
return(xxx)
}
percent <- function(x, digits = 1, format = "f", ...){
result<-paste0(formatC(100 * x, format = format, digits = digits, ...), "%")
return(result)
}
? glm
glm(PHENOTYPE~rowSum,data,family = binomial(link = "logit"))
rs9268839_G
chisq.test(matrix(c(786,321,816,1271),2,2))
chisq.test(matrix(c(786,621,816,971),2,2))
chisq.test(matrix(c(786,721,816,871),2,2))
chisq.test(matrix(c(318,414,1284,1178),2,2))
chisq.test(matrix(c(318,314,1284,1278),2,2))
matrix(c(153,100,975,877,387,453,84,162),ncol=2,byrow=T)
chisq.test(matrix(c(153,100,975,877,387,453,84,162),ncol=2,byrow=T))
chisq.test(matrix(c(153,150,975,877,387,453,84,112),ncol=2,byrow=T))
chisq.test(matrix(c(115,109,1439,1483),2,2))
chisq.test(matrix(c(39,55,1496,1537),2,2))
chisq.test(matrix(c(153,150,975,897,387,433,84,112),ncol=2,byrow=T))
0.05/5
255/733
1625*0.025
1598*0.025
1625*0.025
1598*0.02
library("ChAMP")
library("ggplot2")
require("minfi")
library("knitr")
library("limma")
library("minfi")
library("IlluminaHumanMethylation450kanno.ilmn12.hg19")
library("IlluminaHumanMethylation450kmanifest")
library("IlluminaHumanMethylationEPICanno.ilm10b4.hg19")
library("IlluminaHumanMethylationEPICmanifest")
library("RColorBrewer")
library("missMethyl")
library("minfiData")
library("Gviz")
library("DMRcate")
library("stringr")
RINfun=function(yorig){
yranks=rank(yorig)
tempp=(yranks-.5)/(length(yranks))
return(qnorm(tempp))
}
RawNARemove<-function(data,missratio=0.3){
threshold<-(missratio)*dim(data)[2]
NaRaw<-which(apply(data,1,function(x) sum(is.na(x))>threshold))
zero<-which(apply(data,1,function(x) all(x==0))==T)
NaRAW<-c(NaRaw,zero)
if(length(NaRAW)>0){
data1<-data[-NaRAW,]
}else{
data1<-data;
}
data1
}
############################################################################################
### Section 2. read the idat
############################################################################################
baseDir="C:/Users/Schrodi Lab/Documents/GitHub/LGG/extdata"
setwd(baseDir)
list.files()
dataDirectory <- baseDir
list.files(dataDirectory, recursive = TRUE)
targets <- read.metharray.sheet(baseDir)
RGset <- read.metharray.exp(base = baseDir, targets = targets)
pdf("..\\Figure_S1.pdf")
densityPlot(RGset,xlim=c(0,1),sampGroups = RGset$Sample_Group,main = "Beta", xlab = "Beta",cex=0.1)
detP <- detectionP(RGset)
pal <- brewer.pal(8,"Dark2")
barplot(colMeans(detP), col=pal[factor(targets$Case_Control)], las=2, cex.names=0.8, ylab="Mean detection p-values")
abline(h=0.05,col="red")
legend("topleft", legend=levels(factor(targets$Case_Control)), fill=pal,bg="white")
dev.off()
targets <- read.metharray.sheet(baseDir)
pdf("..\\Figure_S1.pdf")
densityPlot(RGset,xlim=c(0,1),sampGroups = RGset$Sample_Group,main = "Beta", xlab = "Beta",cex=0.1)
detP <- detectionP(RGset)
pal <- brewer.pal(8,"Dark2")
barplot(colMeans(detP), col=pal[factor(targets$Case_Control)], las=2, cex.names=0.8, ylab="Mean detection p-values")
abline(h=0.05,col="red")
legend("topleft", legend=levels(factor(targets$Case_Control)), fill=pal,bg="white")
dev.off()
qcReport(RGset, sampNames=targets$ID, sampGroups=targets$Case_Control,pdf="..\\test\\result\\Figure_S2.qcReport.pdf")
qcReport(RGset, sampNames=targets$ID, sampGroups=targets$Case_Control,pdf="..\\Figure_S2.qcReport.pdf")
pdf("..\\Figure_S3.pdf")
keep <- colMeans(detP) < 0.05
rgSet <- RGset[,keep]
rgSet
targets <- targets[keep,]
targets[,1:5]
mSetSq <- preprocessQuantile(rgSet)
mSetRaw <- preprocessRaw(rgSet)
par(mfrow=c(1,2))
densityPlot(rgSet, sampGroups=targets$Case_Control,main="Raw", legend=FALSE)
legend("top", legend = levels(factor(targets$Case_Control)), text.col=brewer.pal(8,"Dark2"))
densityPlot(getBeta(mSetSq), sampGroups=targets$Case_Control,main="Normalized", legend=FALSE)
legend("top", legend = levels(factor(targets$Case_Control)), text.col=brewer.pal(8,"Dark2"))
dev.off()
pdf("..\\Figure_S3.pdf")
par(mfrow=c(2,2))
densityPlot(rgSet, sampGroups=targets$Case_Control,main="Raw", legend=FALSE)
legend("top", legend = levels(factor(targets$Case_Control)), text.col=brewer.pal(8,"Dark2"))
densityPlot(getBeta(mSetSq), sampGroups=targets$Case_Control,main="Normalized", legend=FALSE)
legend("top", legend = levels(factor(targets$Case_Control)), text.col=brewer.pal(8,"Dark2"))
dev.off()
pdf("..\\Figure_S3.pdf")
par(mfrow=c(2,2))
densityPlot(rgSet, sampGroups=targets$Case_Control,main="Raw", legend=FALSE)
legend("top", legend = levels(factor(targets$Case_Control)), text.col=brewer.pal(8,"Dark2"))
densityPlot(getBeta(mSetSq), sampGroups=targets$Case_Control,main="Normalized", legend=FALSE)
legend("top", legend = levels(factor(targets$Case_Control)), text.col=brewer.pal(8,"Dark2"))
dev.off()
pdf("..\\Figure_S4.pdf")
par(mfrow=c(1,2))
plotMDS(getM(mSetSq), top=1000, gene.selection="common", col=pal[factor(targets$Case_Control)],pch=16,cex=1.5)
legend("top", legend=levels(factor(targets$Case_Control)), text.col=pal,bg="white", cex=0.7,pch=16,col=pal)
plotMDS(getM(mSetSq), top=1000, gene.selection="common",col=pal[factor(targets$Young_Old)],pch=16,cex=1.5)
legend("top", legend=levels(factor(targets$Young_Old)), text.col=pal,bg="white", cex=0.7,pch=16,col=pal)
dev.off()
pdf("..\\Figure_S4.pdf")
plotMDS(getM(mSetSq), top=1000, gene.selection="common", col=pal[factor(targets$Case_Control)],pch=16,cex=1.5)
legend("top", legend=levels(factor(targets$Case_Control)), text.col=pal,bg="white", cex=0.7,pch=16,col=pal)
dev.off()
pdf("..\\Figure_S5.pdf")
par(mfrow=c(1,3))
plotMDS(getM(mSetSq), top=1000, gene.selection="common", col=pal[factor(targets$Case_Control)], dim=c(1,3),pch=16,cex=1.5)
legend("top", legend=levels(factor(targets$Sample_Group)), text.col=pal,cex=0.7, bg="white",pch=16,col=pal)
plotMDS(getM(mSetSq), top=1000, gene.selection="common",col=pal[factor(targets$Case_Control)], dim=c(2,3),pch=16,cex=1.5)
legend("topleft", legend=levels(factor(targets$Sample_Group)), text.col=pal,cex=0.7, bg="white",pch=16,col=pal)
plotMDS(getM(mSetSq), top=1000, gene.selection="common", col=pal[factor(targets$Case_Control)], dim=c(3,4),pch=16,cex=1.5)
legend("topright", legend=levels(factor(targets$Sample_Group)), text.col=pal,cex=0.7, bg="white",pch=16,col=pal)
dev.off()
targets <- read.metharray.sheet(baseDir)
install.packages(c("Deducer", "gplots", "heatmap.plus", "outliers"))
mSetSqFlt<-mSetSq
mVals <- getM(mSetSqFlt)
bVals <- getBeta(mSetSqFlt)
head(bVals[,1:5])
head(mVals[,1:5])
pdf("..\\Figure_S6.pdf")
par(mfrow=c(1,2))
densityPlot(bVals, sampGroups=targets$Case_Control, main="Beta values", legend=FALSE, xlab="Beta values")
legend("top", legend = levels(factor(targets$Case_Control)),text.col=brewer.pal(8,"Dark2"))
densityPlot(mVals, sampGroups=targets$Case_Control, main="M-values",legend=FALSE, xlab="M values")
legend("topleft", legend = levels(factor(targets$Case_Control)), text.col=brewer.pal(8,"Dark2"))
dev.off()
detP <- detP[match(featureNames(mSetSq),rownames(detP)),]
keep <- rowSums(detP < 0.01) == ncol(mSetSq)
table(keep)
mSetSqFlt <- mSetSq[keep,]
mSetSqFlt
keep <- !(featureNames(mSetSqFlt) %in% ann850k$Name[ann850k$chr %in% c("chrX","chrY")])
table(keep)
mSetSqFlt <- mSetSqFlt[keep,]
####################################################################################################################################
### Section 3. read the idat
####################################################################################################################################
MSet.norm <- preprocessIllumina(RGset, bg.correct = TRUE,normalize = "controls", reference = 2)
pdf("..\\Figure_S7.pdf")
mdsPlot(MSet.norm, numPositions = 1000, sampGroups = MSet.norm$Sample_Group, sampNames = MSet.norm$Sample_Name)
dev.off()
predictedSex <- getSex(myNormalRGSet, cutoff = -2)$predictedSex
pdf("..\\Figure_S8.pdf")
mset <- MSet.norm[1:1000,]
M <- getM(mset, type = "beta", betaThreshold = 0.001)
dmp <- dmpFinder(M, pheno=mset$Case_Control, type="categorical")
plotCpg(mset, cpg=rownames(dmp)[1], pheno=mset$Case_Control)
mset <- mset[rownames(dmp),]
dmp <- dmpFinder(M, pheno=mset$Case_Control, type="categorical")
ann450k <- getAnnotation(IlluminaHumanMethylation450kanno.ilmn12.hg19)
head(ann450k
)
detP <- detP[match(featureNames(mSetSq),rownames(detP)),]
keep <- rowSums(detP < 0.01) == ncol(mSetSq)
table(keep)
mSetSqFlt <- mSetSq[keep,]
mSetSqFlt
keep <- !(featureNames(mSetSqFlt) %in% ann450k$Name[ann450k$chr %in% c("chrX","chrY")])
table(keep)
mSetSqFlt <- mSetSqFlt[keep,]
####################################################################################################################################
### Section 3. read the idat
####################################################################################################################################
MSet.norm <- preprocessIllumina(RGset, bg.correct = TRUE,normalize = "controls", reference = 2)
pdf("..\\Figure_S7.pdf")
bVals <- getBeta(mSetSqFlt)
####################################################################################################################################
### Section 3. read the idat
####################################################################################################################################
MSet.norm <- preprocessIllumina(RGset, bg.correct = TRUE,normalize = "controls", reference = 2)
pdf("..\\Figure_S7.pdf")
mdsPlot(MSet.norm, numPositions = 1000, sampGroups = MSet.norm$Sample_Group, sampNames = MSet.norm$Sample_Name)
dev.off()
predictedSex <- getSex(MSet.norm, cutoff = -2)$predictedSex
pdf("..\\Figure_S8.pdf")
mset <- MSet.norm[1:1000,]
M <- getM(mset, type = "beta", betaThreshold = 0.001)
dmp <- dmpFinder(M, pheno=mset$Case_Control, type="categorical")
dmp <- dmpFinder(M, pheno=mset$Case_Control, type="categorical")
M
dim(M)
dataDirectory <- baseDir
list.files(dataDirectory, recursive = TRUE)
targets <- read.metharray.sheet(baseDir)
RGset <- read.metharray.exp(base = baseDir, targets = targets)
####################################################################################################################################
### Section 3. read the idat
####################################################################################################################################
MSet.norm <- preprocessIllumina(RGset, bg.correct = TRUE,normalize = "controls", reference = 2)
predictedSex <- getSex(RGset, cutoff = -2)$predictedSex
predictedSex <- getSex(MSet.norm, cutoff = -2)$predictedSex
pdf("..\\Figure_S8.pdf")
mset <- MSet.norm[1:1000,]
M <- getM(mset, type = "beta", betaThreshold = 0.001)
dmp <- dmpFinder(M, pheno=mset$Case_Control, type="categorical")
plotCpg(mset, cpg=rownames(dmp)[1], pheno=mset$Case_Control)
mset <- mset[rownames(dmp),]
mse <- mapToGenome(mset)
rowData(mse)
mcols(rowData(mse)) <- cbind(mcols(rowData(mse)), dmp)
mSetSq <- preprocessQuantile(rgSet)
mSetRaw <- preprocessRaw(rgSet)
par(mfrow=c(1,2))
plotMDS(getM(mSetSq), top=1000, gene.selection="common",
col=pal[factor(targets$Sample_Group)])
legend("top", legend=levels(factor(targets$Sample_Group)), text.col=pal,
bg="white", cex=0.7)
plotMDS(getM(mSetSq), top=1000, gene.selection="common",
col=pal[factor(targets$Sample_Source)])
legend("top", legend=levels(factor(targets$Sample_Source)), text.col=pal,
bg="white", cex=0.7)
par(mfrow=c(1,3))
plotMDS(getM(mSetSq), top=1000, gene.selection="common",
col=pal[factor(targets$Sample_Group)], dim=c(1,3))
legend("top", legend=levels(factor(targets$Sample_Group)), text.col=pal,
cex=0.7, bg="white")
plotMDS(getM(mSetSq), top=1000, gene.selection="common",
col=pal[factor(targets$Sample_Group)], dim=c(2,3))
legend("topleft", legend=levels(factor(targets$Sample_Group)), text.col=pal,
cex=0.7, bg="white")
plotMDS(getM(mSetSq), top=1000, gene.selection="common",
col=pal[factor(targets$Sample_Group)], dim=c(3,4))
legend("topright", legend=levels(factor(targets$Sample_Group)), text.col=pal,
cex=0.7, bg="white")
####################################################################################################################################
### Section 2. Data Cleaning
####################################################################################################################################
setwd("/home/sguo/Dropbox/Project/methylation/RA/analysis")
Dir="C:/Users/Schrodi Lab/Documents/GitHub/LGG/extdata"
setwd("C:/Users/Schrodi Lab/Documents/GitHub/LGG/extdata")
set.seed(11)
targets <- read.metharray.sheet(Dir)
RGSet <- read.metharray.exp(targets = targets)
phenoData <- pData(RGSet)
manifest <- getManifest(RGSet)
manifest <- getManifest(RGSet)
head(getProbeInfo(manifest))
myNormalRGSet<-preprocessFunnorm(RGSet, nPCs=4, sex = NULL, bgCorr = TRUE,dyeCorr = TRUE, keepCN = TRUE, ratioConvert = TRUE,verbose = TRUE)
predictedSex <- getSex(myNormalRGSet, cutoff = -2)$predictedSex
predictedSex
targets$Gender
predictedSex==targets$Gender
? champ.QC
champ.QC
? mdsPlot
mdsPlot(beta=myNorm, numPositions = 1000, sampGroups = myLoad$pd$Sample_Group, colnames(beta))
mdsPlot(beta=myLoad$beta, numPositions = 1000, sampGroups = myLoad$pd$Sample_Group, colnames(beta))
mdsPlot(dat=myLoad$beta, numPositions = 1000, sampGroups = myLoad$pd$Sample_Group, colnames(beta))
myLoad <- champ.load(Dir,filterBeads=TRUE,arraytype="450k")
mdsPlot(dat=myLoad$beta, numPositions = 1000, sampGroups = myLoad$pd$Sample_Group, colnames(beta))
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
champ.QC(beta = myLoad$beta,resultsDir="../CHAMP_Raw_QCimages/")
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
mdsPlot(dat=myLoad$beta, numPositions = 1000, sampGroups = myLoad$pd$Sample_Group, colnames(beta))
mdsPlot(dat=myLoad$beta, pch=16,numPositions = 1000, sampGroups = myLoad$pd$Sample_Group, colnames(beta))
mdsPlot(dat=myLoad$beta, pch=16,cex=2,numPositions = 1000, sampGroups = myLoad$pd$Sample_Group, colnames(beta))
mdsPlot(dat=myLoad$beta, pch=16,size=2,numPositions = 1000, sampGroups = myLoad$pd$Sample_Group, colnames(beta))
mdsPlot(dat=myLoad$beta, pch=16,lwd=2,numPositions = 1000, sampGroups = myLoad$pd$Sample_Group, colnames(beta))
mdsPlot(dat=myLoad$beta, pch=16,numPositions = 1000, sampGroups = myLoad$pd$Sample_Group, colnames(beta))
? mdsPlot
mdsPlot(dat=myLoad$beta, legendNCol=1,pch=16,numPositions = 1000, sampGroups = myLoad$pd$Sample_Group, colnames(beta))
? mdsPlot
mdsPlot(dat=myLoad$beta, legendNCol=1, legendPos="topright",pch=16,numPositions = 1000, sampGroups = myLoad$pd$Sample_Group, colnames(beta))
? mdsPlot
mdsPlot(dat=myLoad$beta, legendNCol=1, legendPos="topright",pch=16,numPositions = 2000, sampGroups = myLoad$pd$Sample_Group, colnames(beta))
mdsPlot(dat=myLoad$beta, legendNCol=1, legendPos="topright",pch=16,numPositions = 3000, sampGroups = myLoad$pd$Sample_Group, colnames(beta))
mdsPlot(dat=myLoad$beta, legendNCol=1, legendPos="topright",pch=16,numPositions = 4000, sampGroups = myLoad$pd$Sample_Group, colnames(beta))
mdsPlot(dat=myLoad$beta, legendNCol=1, legendPos="topright",pch=16,numPositions = 5000, sampGroups = myLoad$pd$Sample_Group, colnames(beta))
mdsPlot(dat=myLoad$beta, legendNCol=1, legendPos="topright",pch=16,numPositions = 6000, sampGroups = myLoad$pd$Sample_Group, colnames(beta))
mdsPlot(dat=myLoad$beta, legendNCol=1, legendPos="topright",pch=16,numPositions = 7000, sampGroups = myLoad$pd$Sample_Group, colnames(beta))
mdsPlot(dat=myLoad$beta, legendNCol=1, legendPos="topright",pch=16,numPositions = 8000, sampGroups = myLoad$pd$Sample_Group, colnames(beta))
mdsPlot(dat=myLoad$beta, legendNCol=1, legendPos="topright",pch=16,numPositions = 9000, sampGroups = myLoad$pd$Sample_Group, colnames(beta))
mdsPlot(dat=myLoad$beta, legendNCol=1, legendPos="topright",pch=16,numPositions = 10000, sampGroups = myLoad$pd$Sample_Group, colnames(beta))
? mdsPlot
mdsPlot(dat=myLoad$beta, legendNCol=1, legendPos="topright",pch=16,numPositions = 10000, sampGroups = myLoad$pd$Sample_Group, colnames(beta))
myNorm <- champ.norm(beta=myLoad$beta,arraytype="450k",cores=1)
dim(myNorm$beta)
dim(myNorm)
mdsPlot(dat=myNorm, legendNCol=1, legendPos="topright",pch=16,numPositions = 10000, sampGroups = myLoad$pd$Sample_Group, colnames(beta))
par(mfrow=c(2,2))
pdf("Figure.S2.MDS.pdf")
par(mfrow=c(2,2))
mdsPlot(dat=myLoad$beta, legendNCol=1, legendPos="topright",pch=16,numPositions = 10000, sampGroups = myLoad$pd$Sample_Group, colnames(beta))
mdsPlot(dat=myNorm, legendNCol=1, legendPos="topright",pch=16,numPositions = 10000, sampGroups = myLoad$pd$Sample_Group, colnames(beta))
dev.off()
? mdsPlot
mdsPlot
? legend
source("https://raw.githubusercontent.com/Shicheng-Guo/GscRbasement/master/mdsPlot.R")
mdsPlot(dat=myLoad$beta, legendNCol=1, legendPos="topright",pch=16,numPositions = 10000, sampGroups = myLoad$pd$Sample_Group, colnames(beta))
mdsPlot(dat=myLoad$beta, legendNCol=1, legendPos="topright",pch=16,numPositions = 10000, sampGroups = myLoad$pd$Sample_Group, colnames(beta))
mdsPlot(dat=myNorm,legendNCol=1, legendPos="topright",pch=16,numPositions = 10000, sampGroups = myLoad$pd$Sample_Group, colnames(beta))
par(mfrow=c(2,2))
mdsPlot(dat=myLoad$beta, legendNCol=1, legendPos="topright",pch=16,numPositions = 1000, sampGroups = myLoad$pd$Sample_Group, colnames(beta))
mdsPlot(dat=myNorm,legendNCol=1, legendPos="topright",pch=16,numPositions = 1000, sampGroups = myLoad$pd$Sample_Group, colnames(beta))
mdsPlot(dat=myLoad$beta, legendNCol=1, legendPos="topright",pch=16,numPositions = 10000, sampGroups = myLoad$pd$Sample_Group, colnames(beta))
mdsPlot(dat=myNorm,legendNCol=1, legendPos="topright",pch=16,numPositions = 10000, sampGroups = myLoad$pd$Sample_Group, colnames(beta))
par(mfrow=c(2,2),mar=c(1,1,1,1))
mdsPlot(dat=myLoad$beta, legendNCol=1, legendPos="topright",pch=16,numPositions = 1000, sampGroups = myLoad$pd$Sample_Group, colnames(beta))
mdsPlot(dat=myNorm,legendNCol=1, legendPos="topright",pch=16,numPositions = 1000, sampGroups = myLoad$pd$Sample_Group, colnames(beta))
mdsPlot(dat=myLoad$beta, legendNCol=1, legendPos="topright",pch=16,numPositions = 10000, sampGroups = myLoad$pd$Sample_Group, colnames(beta))
mdsPlot(dat=myNorm,legendNCol=1, legendPos="topright",pch=16,numPositions = 10000, sampGroups = myLoad$pd$Sample_Group, colnames(beta))
dev.off()
par(mfrow=c(2,2),mar=c(3,3,3,3))
mdsPlot(dat=myLoad$beta, legendNCol=1, legendPos="topright",pch=16,numPositions = 1000, sampGroups = myLoad$pd$Sample_Group, colnames(beta))
mdsPlot(dat=myNorm,legendNCol=1, legendPos="topright",pch=16,numPositions = 1000, sampGroups = myLoad$pd$Sample_Group, colnames(beta))
mdsPlot(dat=myLoad$beta, legendNCol=1, legendPos="topright",pch=16,numPositions = 10000, sampGroups = myLoad$pd$Sample_Group, colnames(beta))
mdsPlot(dat=myNorm,legendNCol=1, legendPos="topright",pch=16,numPositions = 10000, sampGroups = myLoad$pd$Sample_Group, colnames(beta))
par(mfrow=c(2,2),mar=c(3,3,1,3))
mdsPlot(dat=myLoad$beta, legendNCol=1, legendPos="topright",pch=16,numPositions = 1000, sampGroups = myLoad$pd$Sample_Group, colnames(beta))
par(mfrow=c(2,2),mar=c(3,3,3,3))
dev.off()
par(mfrow=c(2,2),mar=c(3,3,3,3))
mdsPlot(dat=myLoad$beta, legendNCol=1, legendPos="topright",pch=16,numPositions = 1000, sampGroups = myLoad$pd$Sample_Group, colnames(beta))
mdsPlot(dat=myNorm,legendNCol=1, legendPos="topright",pch=16,numPositions = 1000, sampGroups = myLoad$pd$Sample_Group, colnames(beta))
mdsPlot(dat=myLoad$beta, legendNCol=1, legendPos="topright",pch=16,numPositions = 10000, sampGroups = myLoad$pd$Sample_Group, colnames(beta))
mdsPlot(dat=myNorm,legendNCol=1, legendPos="topright",pch=16,numPositions = 10000, sampGroups = myLoad$pd$Sample_Group, colnames(beta))
par(mfrow=c(2,2),mar=c(1,3,3,3))
mdsPlot(dat=myLoad$beta, legendNCol=1, legendPos="topright",pch=16,numPositions = 1000, sampGroups = myLoad$pd$Sample_Group, colnames(beta))
mdsPlot(dat=myNorm,legendNCol=1, legendPos="topright",pch=16,numPositions = 1000, sampGroups = myLoad$pd$Sample_Group, colnames(beta))
mdsPlot(dat=myLoad$beta, legendNCol=1, legendPos="topright",pch=16,numPositions = 10000, sampGroups = myLoad$pd$Sample_Group, colnames(beta))
mdsPlot(dat=myNorm,legendNCol=1, legendPos="topright",pch=16,numPositions = 10000, sampGroups = myLoad$pd$Sample_Group, colnames(beta))
dev.off()
par(mfrow=c(2,2),mar=c(2,3,3,3))
mdsPlot(dat=myLoad$beta, legendNCol=1, legendPos="topright",pch=16,numPositions = 1000, sampGroups = myLoad$pd$Sample_Group, colnames(beta))
mdsPlot(dat=myNorm,legendNCol=1, legendPos="topright",pch=16,numPositions = 1000, sampGroups = myLoad$pd$Sample_Group, colnames(beta))
mdsPlot(dat=myLoad$beta, legendNCol=1, legendPos="topright",pch=16,numPositions = 10000, sampGroups = myLoad$pd$Sample_Group, colnames(beta))
mdsPlot(dat=myNorm,legendNCol=1, legendPos="topright",pch=16,numPositions = 10000, sampGroups = myLoad$pd$Sample_Group, colnames(beta))
pdf("Figure.S2.MDS.pdf")
par(mfrow=c(2,2),mar=c(2,3,3,3))
mdsPlot(dat=myLoad$beta, legendNCol=1, legendPos="topright",pch=16,numPositions = 1000, sampGroups = myLoad$pd$Sample_Group, colnames(beta))
mdsPlot(dat=myNorm,legendNCol=1, legendPos="topright",pch=16,numPositions = 1000, sampGroups = myLoad$pd$Sample_Group, colnames(beta))
mdsPlot(dat=myLoad$beta, legendNCol=1, legendPos="topright",pch=16,numPositions = 50000, sampGroups = myLoad$pd$Sample_Group, colnames(beta))
mdsPlot(dat=myNorm,legendNCol=1, legendPos="topright",pch=16,numPositions = 50000, sampGroups = myLoad$pd$Sample_Group, colnames(beta))
dev.off()
pdf("Figure.S2.MDS.pdf")
par(mfrow=c(2,2),mar=c(2,3,3,3))
mdsPlot(dat=myLoad$beta, legendNCol=1, legendPos="topright",pch=16,numPositions = 1000, sampGroups = myLoad$pd$Sample_Group, colnames(beta))
mdsPlot(dat=myNorm,legendNCol=1, legendPos="topright",pch=16,numPositions = 1000, sampGroups = myLoad$pd$Sample_Group, colnames(beta))
mdsPlot(dat=myLoad$beta, legendNCol=1, legendPos="topright",pch=16,numPositions = 20000, sampGroups = myLoad$pd$Sample_Group, colnames(beta))
mdsPlot(dat=myNorm,legendNCol=1, legendPos="topright",pch=16,numPositions = 20000, sampGroups = myLoad$pd$Sample_Group, colnames(beta))
dev.off()
pdf("Figure.S2.MDS.pdf")
par(mfrow=c(2,2),mar=c(2,3,3,3))
mdsPlot(dat=myLoad$beta, legendNCol=1, legendPos="topright",pch=16,numPositions = 1000, sampGroups = myLoad$pd$Sample_Group, colnames(beta))
mdsPlot(dat=myNorm,legendNCol=1, legendPos="topright",pch=16,numPositions = 1000, sampGroups = myLoad$pd$Sample_Group, colnames(beta))
mdsPlot(dat=myLoad$beta, legendNCol=1, legendPos="topright",pch=16,numPositions = 20000, sampGroups = myLoad$pd$Sample_Group, colnames(beta))
mdsPlot(dat=myNorm,legendNCol=1, legendPos="topright",pch=16,numPositions = 20000, sampGroups = myLoad$pd$Sample_Group, colnames(beta))
dev.off()
source("https://raw.githubusercontent.com/Shicheng-Guo/GscRbasement/master/mdsPlot.R")
par(mfrow=c(2,2),mar=c(2,3,3,3))
mdsPlot(dat=myLoad$beta, legendNCol=1, legendPos="topright",pch=16,numPositions = 1000, sampGroups = myLoad$pd$Sample_Group, colnames(beta))
mdsPlot(dat=myNorm,legendNCol=1, legendPos="topright",pch=16,numPositions = 1000, sampGroups = myLoad$pd$Sample_Group, colnames(beta))
mdsPlot(dat=myLoad$beta, legendNCol=1, legendPos="topright",pch=16,numPositions = 20000, sampGroups = myLoad$pd$Sample_Group, colnames(beta))
mdsPlot(dat=myNorm,legendNCol=1, legendPos="topright",pch=16,numPositions = 20000, sampGroups = myLoad$pd$Sample_Group, colnames(beta))
